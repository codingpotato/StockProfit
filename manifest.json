{"makefile":"CXXFLAGS += -I. -std=c++11 -Wall -Wextra -Werror\nCXXFLAGS += -fsanitize=undefined -fno-sanitize-recover=undefined\nCXXFLAGS += -fsanitize=address -fno-omit-frame-pointer\n\nGTEST_LIBS = -lgtest -lgtest_main -pthread\n\nHPP_FILES = $(wildcard *.hpp)\nCOMPILED_HPP_FILES = $(patsubst %.hpp,%.compiled_hpp,$(HPP_FILES))\nCPP_FILES = $(wildcard *.cpp)\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$< --gtest_shuffle\n\ntest: makefile $(CPP_FILES) $(COMPILED_HPP_FILES)\n\t@$(CXX) $(CXXFLAGS) -O $(CPP_FILES) $(GTEST_LIBS) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .cpp files which are not #included)\n\n%.compiled_hpp: %.hpp\n\t@$(CXX) -x c++ $(CXXFLAGS) -c -o $@ $<","cyber-dojo.sh":"export CXX=clang++\nmake --always-make\n\n","output":"StockProfit.tests.cpp:10:17: error: no matching constructor for initialization of 'StockProfit'\n    StockProfit stockProfit(prices);\n                ^           ~~~~~~\n./StockProfit.hpp:8:7: note: candidate constructor (the implicit copy constructor) not viable: no known conversion from 'vector<int>' to 'const StockProfit' for 1st argument\nclass StockProfit {\n      ^\n./StockProfit.hpp:8:7: note: candidate constructor (the implicit move constructor) not viable: no known conversion from 'vector<int>' to 'StockProfit' for 1st argument\nclass StockProfit {\n      ^\n./StockProfit.hpp:8:7: note: candidate constructor (the implicit default constructor) not viable: requires 0 arguments, but 1 was provided\n1 error generated.\nmake: *** [test] Error 1\n","StockProfit.cpp":"","StockProfit.hpp":"#ifndef STOCK_PROFIT_INCLUDED\n#define STOCK_PROFIT_INCLUDED\n\n#include <vector>\n\nusing namespace std;\n\nclass StockProfit {\n};\n\n#endif\n","StockProfit.tests.cpp":"#include \"StockProfit.hpp\"\n#include <gtest/gtest.h>\n\nusing namespace ::testing;\n\nTEST(StockProfit, Empty_prices)\n{\n    vector<int> prices;\n    vector<vector<int>> expectTransactions;\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectTransactions, stockProfit.getTransactions);\n}\n"}