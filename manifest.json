{"makefile":"CXXFLAGS += -I. -std=c++11 -Wall -Wextra -Werror\nCXXFLAGS += -fsanitize=undefined -fno-sanitize-recover=undefined\nCXXFLAGS += -fsanitize=address -fno-omit-frame-pointer\n\nGTEST_LIBS = -lgtest -lgtest_main -pthread\n\nHPP_FILES = $(wildcard *.hpp)\nCOMPILED_HPP_FILES = $(patsubst %.hpp,%.compiled_hpp,$(HPP_FILES))\nCPP_FILES = $(wildcard *.cpp)\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$< --gtest_shuffle\n\ntest: makefile $(CPP_FILES) $(COMPILED_HPP_FILES)\n\t@$(CXX) $(CXXFLAGS) -O $(CPP_FILES) $(GTEST_LIBS) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .cpp files which are not #included)\n\n%.compiled_hpp: %.hpp\n\t@$(CXX) -x c++ $(CXXFLAGS) -c -o $@ $<","cyber-dojo.sh":"export CXX=clang++\nmake --always-make\n\n","output":"StockProfit.tests.cpp:11:47: error: reference to non-static member function must be called; did you mean to call it with no arguments?\n    ASSERT_EQ(expectTransactions, stockProfit.getTransactions);\n                                  ~~~~~~~~~~~~^~~~~~~~~~~~~~~\n/usr/include/gtest/gtest.h:1889:54: note: expanded from macro 'ASSERT_EQ'\n# define ASSERT_EQ(val1, val2) GTEST_ASSERT_EQ(val1, val2)\n                                                     ^\n/usr/include/gtest/gtest.h:1873:33: note: expanded from macro 'GTEST_ASSERT_EQ'\n                      expected, actual)\n                                ^\n/usr/include/gtest/gtest_pred_impl.h:166:40: note: expanded from macro 'ASSERT_PRED_FORMAT2'\n  GTEST_PRED_FORMAT2_(pred_format, v1, v2, GTEST_FATAL_FAILURE_)\n                                       ^\n/usr/include/gtest/gtest_pred_impl.h:147:43: note: expanded from macro 'GTEST_PRED_FORMAT2_'\n  GTEST_ASSERT_(pred_format(#v1, #v2, v1, v2),\\\n                                          ^\n/usr/include/gtest/gtest_pred_impl.h:77:52: note: expanded from macro 'GTEST_ASSERT_'\n  if (const ::testing::AssertionResult gtest_ar = (expression)) \\\n                                                   ^\n1 error generated.\nmake: *** [test] Error 1\n","StockProfit.cpp":"#include \"StockProfit.hpp\"\n\nStockProfit::StockProfit(vector<int> prices)\n    : prices_(prices) {\n}\n\nvector<vector<int>> StockProfit::getTransactions() {\n    vector<vector<int>> transactions;\n    return transactions;\n}\n","StockProfit.hpp":"#ifndef STOCK_PROFIT_INCLUDED\n#define STOCK_PROFIT_INCLUDED\n\n#include <vector>\n\nusing namespace std;\n\nclass StockProfit {\n\npublic:\n    StockProfit(vector<int> prices);\n\n    vector<vector<int>> getTransactions();\n\nprivate:\n    vector<int> prices_;\n\n};\n\n#endif\n","StockProfit.tests.cpp":"#include \"StockProfit.hpp\"\n#include <gtest/gtest.h>\n\nusing namespace ::testing;\n\nTEST(StockProfit, Empty_prices)\n{\n    vector<int> prices;\n    vector<vector<int>> expectTransactions;\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectTransactions, stockProfit.getTransactions);\n}\n"}