{"makefile":"CXXFLAGS += -I. -std=c++11 -Wall -Wextra -Werror\nCXXFLAGS += -fsanitize=undefined -fno-sanitize-recover=undefined\nCXXFLAGS += -fsanitize=address -fno-omit-frame-pointer\n\nGTEST_LIBS = -lgtest -lgtest_main -pthread\n\nHPP_FILES = $(wildcard *.hpp)\nCOMPILED_HPP_FILES = $(patsubst %.hpp,%.compiled_hpp,$(HPP_FILES))\nCPP_FILES = $(wildcard *.cpp)\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$< --gtest_shuffle\n\ntest: makefile $(CPP_FILES) $(COMPILED_HPP_FILES)\n\t@$(CXX) $(CXXFLAGS) -O $(CPP_FILES) $(GTEST_LIBS) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .cpp files which are not #included)\n\n%.compiled_hpp: %.hpp\n\t@$(CXX) -x c++ $(CXXFLAGS) -c -o $@ $<","cyber-dojo.sh":"export CXX=clang++\nmake --always-make\n\n","output":"Running main() from gtest_main.cc\nNote: Randomizing tests' orders with a seed of 31152 .\n[==========] Running 2 tests from 1 test case.\n[----------] Global test environment set-up.\n[----------] 2 tests from StockProfit\n[ RUN      ] StockProfit.Empty_prices\n[       OK ] StockProfit.Empty_prices (0 ms)\n[ RUN      ] StockProfit.One_day_prices\nStockProfit.tests.cpp:20: Failure\nValue of: stockProfit.getTransactions()\n  Actual: {}\nExpected: expectTransactions\nWhich is: { {} }\n[  FAILED  ] StockProfit.One_day_prices (0 ms)\n[----------] 2 tests from StockProfit (1 ms total)\n\n[----------] Global test environment tear-down\n[==========] 2 tests from 1 test case ran. (3 ms total)\n[  PASSED  ] 1 test.\n[  FAILED  ] 1 test, listed below:\n[  FAILED  ] StockProfit.One_day_prices\n\n 1 FAILED TEST\nmake: *** [test.output] Error 1\n","StockProfit.cpp":"#include \"StockProfit.hpp\"\n\nStockProfit::StockProfit(vector<int> prices)\n    : prices_(prices) {\n}\n\nvector<vector<int>> StockProfit::getTransactions() {\n    vector<vector<int>> transactions;\n    return transactions;\n}\n","StockProfit.hpp":"#ifndef STOCK_PROFIT_INCLUDED\n#define STOCK_PROFIT_INCLUDED\n\n#include <vector>\n\nusing namespace std;\n\n\nenum Transaction {\n    PASS, BUY, SELL, COOLDOWN\n};\n\n\nclass StockProfit {\n\npublic:\n    StockProfit(vector<int> prices);\n\n    vector<vector<int>> getTransactions();\n\nprivate:\n    vector<int> prices_;\n\n};\n\n#endif\n","StockProfit.tests.cpp":"#include \"StockProfit.hpp\"\n#include <gtest/gtest.h>\n\nusing namespace ::testing;\n\nTEST(StockProfit, Empty_prices)\n{\n    vector<int> prices;\n    vector<vector<int>> expectTransactions;\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectTransactions, stockProfit.getTransactions());\n}\n\nTEST(StockProfit, One_day_prices)\n{\n    vector<int> prices({1}, 1);\n    vector<vector<int>> expectTransactions;\n    expectTransactions.push_back(vector<int>({PASS}, 1));\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectTransactions, stockProfit.getTransactions());\n}\n"}