{"makefile":"CXXFLAGS += -I. -std=c++11 -Wall -Wextra -Werror\nCXXFLAGS += -fsanitize=undefined -fno-sanitize-recover=undefined\nCXXFLAGS += -fsanitize=address -fno-omit-frame-pointer\n\nGTEST_LIBS = -lgtest -lgtest_main -pthread\n\nHPP_FILES = $(wildcard *.hpp)\nCOMPILED_HPP_FILES = $(patsubst %.hpp,%.compiled_hpp,$(HPP_FILES))\nCPP_FILES = $(wildcard *.cpp)\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$< --gtest_shuffle\n\ntest: makefile $(CPP_FILES) $(COMPILED_HPP_FILES)\n\t@$(CXX) $(CXXFLAGS) -O $(CPP_FILES) $(GTEST_LIBS) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .cpp files which are not #included)\n\n%.compiled_hpp: %.hpp\n\t@$(CXX) -x c++ $(CXXFLAGS) -c -o $@ $<","cyber-dojo.sh":"export CXX=clang++\nmake --always-make\n\n","output":"StockProfit.tests.cpp:29:21: error: no member named 'getMaxProfitsWithStockInHand' in 'StockProfit'\n        stockProfit.getMaxProfitsWithStockInHand());\n        ~~~~~~~~~~~ ^\n/usr/include/gtest/gtest.h:1889:54: note: expanded from macro 'ASSERT_EQ'\n# define ASSERT_EQ(val1, val2) GTEST_ASSERT_EQ(val1, val2)\n                                                     ^\n/usr/include/gtest/gtest.h:1873:33: note: expanded from macro 'GTEST_ASSERT_EQ'\n                      expected, actual)\n                                ^\n/usr/include/gtest/gtest_pred_impl.h:166:40: note: expanded from macro 'ASSERT_PRED_FORMAT2'\n  GTEST_PRED_FORMAT2_(pred_format, v1, v2, GTEST_FATAL_FAILURE_)\n                                       ^\n/usr/include/gtest/gtest_pred_impl.h:147:43: note: expanded from macro 'GTEST_PRED_FORMAT2_'\n  GTEST_ASSERT_(pred_format(#v1, #v2, v1, v2),\\\n                                          ^\n/usr/include/gtest/gtest_pred_impl.h:77:52: note: expanded from macro 'GTEST_ASSERT_'\n  if (const ::testing::AssertionResult gtest_ar = (expression)) \\\n                                                   ^\n1 error generated.\nmake: *** [test] Error 1\n","StockProfit.cpp":"#include \"StockProfit.hpp\"\n\nStockProfit::StockProfit(vector<int> prices)\n    : prices_(prices),\n      maxProfitsAfterBuy_(prices.size()),\n      maxProfits_(prices.size()) {\n    calculateProfits();\n}\n\nvector<int> StockProfit::getMaxProfitsAfterBuy() {\n    return maxProfitsAfterBuy_;\n}\n\nvector<int> StockProfit::getMaxProfits() {\n    return maxProfits_;\n}\n\nvector<vector<int>> StockProfit::getTransactions() {\n    vector<vector<int>> transactions;\n    if (prices_.size() == 1) {\n        vector<int> transaction;\n        transaction.push_back(PASS);\n        transactions.push_back(transaction);\n    } else if (prices_.size() == 2) {\n        vector<int> transaction;\n        transaction.push_back(BUY);\n        transaction.push_back(SELL);\n        transactions.push_back(transaction);\n    }\n    return transactions;\n}\n\nvoid StockProfit::calculateProfits() {\n    if (prices_.size() > 1) {\n        maxProfits_[0] = 0;\n        maxProfits_[1] = max(maxProfits_[0], prices_[1] - prices_[0]);\n    }\n    for (unsigned int i = 0; i < prices_.size(); ++i) {\n        int profit = -prices_[i];\n        if (i > 1) {\n            profit += maxProfits_[i - 2];\n        }\n        maxProfitsAfterBuy_[i] = profit;\n    }\n}\n","StockProfit.hpp":"#ifndef STOCK_PROFIT_INCLUDED\n#define STOCK_PROFIT_INCLUDED\n\n#include <vector>\n\nusing namespace std;\n\n\nenum Transaction {\n    PASS, BUY, SELL, COOLDOWN\n};\n\n\nclass StockProfit {\n\npublic:\n    StockProfit(vector<int> prices);\n\n    vector<int> getMaxProfitsAfterBuy();\n    vector<int> getMaxProfits();\n    vector<vector<int>> getTransactions();\n\nprivate:\n    void calculateProfits();\n\n    vector<int> prices_;\n    vector<int> maxProfitsAfterBuy_;\n    vector<int> maxProfits_;\n\n};\n\n#endif","StockProfit.tests.cpp":"#include \"StockProfit.hpp\"\n#include <gtest/gtest.h>\n\nusing namespace ::testing;\n\nTEST(StockProfit, Empty_prices) {\n    vector<int> prices;\n    vector<vector<int>> expectTransactions;\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectTransactions, stockProfit.getTransactions());\n}\n\nTEST(StockProfit, Get_max_profits_after_buy_for_empty_prices) {\n    vector<int> prices;\n    vector<int> expectMaxProfitsAfterBuy;\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsAfterBuy,\n        stockProfit.getMaxProfitsAfterBuy());\n}\n\nTEST(StockProfit, Get_max_profits_with_stock_in_hand_for_empty_prices) {\n    vector<int> prices;\n    vector<int> expectMaxProfitsWithStockInHand;\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsWithStockInHand,\n        stockProfit.getMaxProfitsWithStockInHand());\n}\n\nTEST(StockProfit, Get_max_profits_for_empty_prices) {\n    vector<int> prices;\n    vector<int> expectMaxProfits;\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfits, stockProfit.getMaxProfits());\n}\n\nTEST(StockProfit, One_day_prices) {\n    int pricesValue[] = {1};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    vector<vector<int>> expectTransactions;\n    int transactionValues[] = {PASS};\n    expectTransactions.push_back(\n        vector<int>(transactionValues, transactionValues + pricesLength));\n    \n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectTransactions, stockProfit.getTransactions());\n}\n\nTEST(StockProfit, Get_max_profits_after_buy_for_one_day_prices) {\n    int pricesValue[] = {1};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsAfterBuyValues[] = {-1};\n    vector<int> expectMaxProfitsAfterBuy(maxProfitsAfterBuyValues,\n        maxProfitsAfterBuyValues + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsAfterBuy,\n        stockProfit.getMaxProfitsAfterBuy());\n}\n\nTEST(StockProfit, Get_max_profits_for_one_day_prices) {\n    int pricesValue[] = {1};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsValue[] = {0};\n    vector<int> expectMaxProfits(maxProfitsValue,\n        maxProfitsValue + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfits, stockProfit.getMaxProfits());\n}\n\nTEST(StockProfit, Two_day_prices) {\n    int pricesValue[] = {1, 2};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    vector<vector<int>> expectTransactions;\n    int transactionValues[] = {BUY, SELL};\n    expectTransactions.push_back(\n        vector<int>(transactionValues, transactionValues + pricesLength));\n    \n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectTransactions, stockProfit.getTransactions());\n}\n\nTEST(StockProfit, Get_max_profits_after_buy_for_two_day_prices) {\n    int pricesValue[] = {1, 2};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsAfterBuyValues[] = {-1, -2};\n    vector<int> expectMaxProfitsAfterBuy(maxProfitsAfterBuyValues,\n        maxProfitsAfterBuyValues + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsAfterBuy,\n        stockProfit.getMaxProfitsAfterBuy());\n}\n\nTEST(StockProfit, Get_max_profits_for_two_day_prices) {\n    int pricesValue[] = {2, 1};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsValue[] = {0, 0};\n    vector<int> expectMaxProfits(maxProfitsValue,\n        maxProfitsValue + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfits, stockProfit.getMaxProfits());\n}\n\nTEST(StockProfit, Get_max_profits_after_buy_for_four_day_prices) {\n    int pricesValue[] = {1, 2, 3, 4};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsAfterBuyValues[] = {-1, -2, -3, -3};\n    vector<int> expectMaxProfitsAfterBuy(maxProfitsAfterBuyValues,\n        maxProfitsAfterBuyValues + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsAfterBuy,\n        stockProfit.getMaxProfitsAfterBuy());\n}\n"}