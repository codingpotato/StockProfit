{"makefile":"CXXFLAGS += -I. -std=c++11 -Wall -Wextra -Werror\nCXXFLAGS += -fsanitize=undefined -fno-sanitize-recover=undefined\nCXXFLAGS += -fsanitize=address -fno-omit-frame-pointer\n\nGTEST_LIBS = -lgtest -lgtest_main -pthread\n\nHPP_FILES = $(wildcard *.hpp)\nCOMPILED_HPP_FILES = $(patsubst %.hpp,%.compiled_hpp,$(HPP_FILES))\nCPP_FILES = $(wildcard *.cpp)\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$< --gtest_shuffle\n\ntest: makefile $(CPP_FILES) $(COMPILED_HPP_FILES)\n\t@$(CXX) $(CXXFLAGS) -O $(CPP_FILES) $(GTEST_LIBS) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .cpp files which are not #included)\n\n%.compiled_hpp: %.hpp\n\t@$(CXX) -x c++ $(CXXFLAGS) -c -o $@ $<","cyber-dojo.sh":"export CXX=clang++\nmake --always-make\n\n","output":"StockProfit.cpp:10:39: error: use of undeclared identifier 'prices'; did you mean 'prices_'?\n        maxProfitsAfterBuy.push_back(-prices[0]);\n                                      ^~~~~~\n                                      prices_\n./StockProfit.hpp:23:17: note: 'prices_' declared here\n    vector<int> prices_;\n                ^\n1 error generated.\nmake: *** [test] Error 1\n","StockProfit.cpp":"#include \"StockProfit.hpp\"\n\nStockProfit::StockProfit(vector<int> prices)\n    : prices_(prices) {\n}\n\nvector<int> StockProfit::getMaxProfitsAfterBuy() {\n    vector<int> maxProfitsAfterBuy;\n    if (prices_.size() == 1) {\n        maxProfitsAfterBuy.push_back(-prices[0]);\n    }\n    return maxProfitsAfterBuy;\n}\n\nvector<vector<int>> StockProfit::getTransactions() {\n    vector<vector<int>> transactions;\n    if (prices_.size() == 1) {\n        vector<int> transaction;\n        transaction.push_back(PASS);\n        transactions.push_back(transaction);\n    } else if (prices_.size() == 2) {\n        vector<int> transaction;\n        transaction.push_back(BUY);\n        transaction.push_back(SELL);\n        transactions.push_back(transaction);\n    }\n    return transactions;\n}\n","StockProfit.hpp":"#ifndef STOCK_PROFIT_INCLUDED\n#define STOCK_PROFIT_INCLUDED\n\n#include <vector>\n\nusing namespace std;\n\n\nenum Transaction {\n    PASS, BUY, SELL, COOLDOWN\n};\n\n\nclass StockProfit {\n\npublic:\n    StockProfit(vector<int> prices);\n\n    vector<int> getMaxProfitsAfterBuy();\n    vector<vector<int>> getTransactions();\n\nprivate:\n    vector<int> prices_;\n\n};\n\n#endif","StockProfit.tests.cpp":"#include \"StockProfit.hpp\"\n#include <gtest/gtest.h>\n\nusing namespace ::testing;\n\nTEST(StockProfit, Empty_prices) {\n    vector<int> prices;\n    vector<vector<int>> expectTransactions;\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectTransactions, stockProfit.getTransactions());\n}\n\nTEST(StockProfit, Get_max_profit_after_buy_for_empty_prices) {\n    vector<int> prices;\n    vector<int> expectMaxProfitsAfterBuy;\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsAfterBuy,\n        stockProfit.getMaxProfitsAfterBuy());\n}\n\nTEST(StockProfit, One_day_prices) {\n    int priceValues[] = {1};\n    vector<int> prices(priceValues, priceValues + 1);\n    vector<vector<int>> expectTransactions;\n    int transactionValues[] = {PASS};\n    expectTransactions.push_back(\n        vector<int>(transactionValues, transactionValues + 1));\n    \n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectTransactions, stockProfit.getTransactions());\n}\n\nTEST(StockProfit, Get_max_profit_after_buy_for_one_day_prices) {\n    int priceValues[] = {1};\n    vector<int> prices(priceValues, priceValues + 1);\n    int maxProfitsAfterBuyValues[] = {-1};\n    vector<int> expectMaxProfitsAfterBuy(\n        maxProfitsAfterBuyValues, maxProfitsAfterBuyValues + 1);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsAfterBuy,\n        stockProfit.getMaxProfitsAfterBuy());\n}\n\nTEST(StockProfit, Two_day_prices) {\n    int pricesLength = 2;\n    int priceValues[] = {1, 2};\n    vector<int> prices(priceValues, priceValues + pricesLength);\n    vector<vector<int>> expectTransactions;\n    int transactionValues[] = {BUY, SELL};\n    expectTransactions.push_back(\n        vector<int>(transactionValues, transactionValues + pricesLength));\n    \n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectTransactions, stockProfit.getTransactions());\n}"}