{"makefile":"CXXFLAGS += -I. -std=c++11 -Wall -Wextra -Werror\nCXXFLAGS += -fsanitize=undefined -fno-sanitize-recover=undefined\nCXXFLAGS += -fsanitize=address -fno-omit-frame-pointer\n\nGTEST_LIBS = -lgtest -lgtest_main -pthread\n\nHPP_FILES = $(wildcard *.hpp)\nCOMPILED_HPP_FILES = $(patsubst %.hpp,%.compiled_hpp,$(HPP_FILES))\nCPP_FILES = $(wildcard *.cpp)\n\n.PHONY: test.output\ntest.output: test makefile\n\t@./$< --gtest_shuffle\n\ntest: makefile $(CPP_FILES) $(COMPILED_HPP_FILES)\n\t@$(CXX) $(CXXFLAGS) -O $(CPP_FILES) $(GTEST_LIBS) -o $@\n\n# This rule ensures header files build in their own right.\n# The quality of header files is important because header files\n# are #included from other files and thus have a large span\n# of influence (unlike .cpp files which are not #included)\n\n%.compiled_hpp: %.hpp\n\t@$(CXX) -x c++ $(CXXFLAGS) -c -o $@ $<","cyber-dojo.sh":"export CXX=clang++\nmake --always-make\n\n","output":"Running main() from gtest_main.cc\nNote: Randomizing tests' orders with a seed of 56306 .\n[==========] Running 30 tests from 1 test case.\n[----------] Global test environment set-up.\n[----------] 30 tests from StockProfit\n[ RUN      ] StockProfit.Get_max_profits_with_stock_in_hand_for_empty_prices\n[       OK ] StockProfit.Get_max_profits_with_stock_in_hand_for_empty_prices (1 ms)\n[ RUN      ] StockProfit.Get_max_profits_after_buy_for_one_day_prices\n[       OK ] StockProfit.Get_max_profits_after_buy_for_one_day_prices (0 ms)\n[ RUN      ] StockProfit.Empty_prices\n[       OK ] StockProfit.Empty_prices (0 ms)\n[ RUN      ] StockProfit.Get_max_profits_with_stock_in_hand_for_three_day_prices\n[       OK ] StockProfit.Get_max_profits_with_stock_in_hand_for_three_day_prices (0 ms)\n[ RUN      ] StockProfit.Two_day_prices\n[       OK ] StockProfit.Two_day_prices (0 ms)\n[ RUN      ] StockProfit.Get_max_profits_after_buy_for_two_day_prices\n[       OK ] StockProfit.Get_max_profits_after_buy_for_two_day_prices (0 ms)\n[ RUN      ] StockProfit.Get_max_profits_for_one_day_prices\n[       OK ] StockProfit.Get_max_profits_for_one_day_prices (0 ms)\n[ RUN      ] StockProfit.Get_max_profits_with_stock_in_hand_for_two_day_prices\n[       OK ] StockProfit.Get_max_profits_with_stock_in_hand_for_two_day_prices (0 ms)\n[ RUN      ] StockProfit.Get_max_profits_after_sell\n[       OK ] StockProfit.Get_max_profits_after_sell (0 ms)\n[ RUN      ] StockProfit.Get_max_profits_for_two_day_descending_prices\n[       OK ] StockProfit.Get_max_profits_for_two_day_descending_prices (0 ms)\n[ RUN      ] StockProfit.Get_max_profits_for_three_day_prices\n[       OK ] StockProfit.Get_max_profits_for_three_day_prices (0 ms)\n[ RUN      ] StockProfit.Get_transactions_not_last_sell\n[       OK ] StockProfit.Get_transactions_not_last_sell (0 ms)\n[ RUN      ] StockProfit.Get_max_profits_after_buy_for_three_day_prices\n[       OK ] StockProfit.Get_max_profits_after_buy_for_three_day_prices (0 ms)\n[ RUN      ] StockProfit.Get_max_profits_after_buy\n[       OK ] StockProfit.Get_max_profits_after_buy (0 ms)\n[ RUN      ] StockProfit.Get_max_profits_for_empty_prices\n[       OK ] StockProfit.Get_max_profits_for_empty_prices (0 ms)\n[ RUN      ] StockProfit.Get_max_profits_after_buy_for_four_day_prices\n[       OK ] StockProfit.Get_max_profits_after_buy_for_four_day_prices (0 ms)\n[ RUN      ] StockProfit.Get_max_profits_after_sell_for_one_day_prices\n[       OK ] StockProfit.Get_max_profits_after_sell_for_one_day_prices (0 ms)\n[ RUN      ] StockProfit.One_day_prices\n[       OK ] StockProfit.One_day_prices (0 ms)\n[ RUN      ] StockProfit.Get_transactions_multipul_sell\n[       OK ] StockProfit.Get_transactions_multipul_sell (0 ms)\n[ RUN      ] StockProfit.Get_max_profits\n[       OK ] StockProfit.Get_max_profits (0 ms)\n[ RUN      ] StockProfit.Three_day_prices\n[       OK ] StockProfit.Three_day_prices (0 ms)\n[ RUN      ] StockProfit.Get_max_profits_after_sell_for_three_day_prices\n[       OK ] StockProfit.Get_max_profits_after_sell_for_three_day_prices (0 ms)\n[ RUN      ] StockProfit.Get_max_profits_after_sell_for_empty_prices\n[       OK ] StockProfit.Get_max_profits_after_sell_for_empty_prices (0 ms)\n[ RUN      ] StockProfit.Get_max_profits_after_sell_for_two_day_prices\n[       OK ] StockProfit.Get_max_profits_after_sell_for_two_day_prices (0 ms)\n[ RUN      ] StockProfit.Get_max_profits_for_four_day_prices\n[       OK ] StockProfit.Get_max_profits_for_four_day_prices (0 ms)\n[ RUN      ] StockProfit.Get_max_profits_with_stock_in_hand_for_one_day_prices\n[       OK ] StockProfit.Get_max_profits_with_stock_in_hand_for_one_day_prices (0 ms)\n[ RUN      ] StockProfit.Get_transactions\n[       OK ] StockProfit.Get_transactions (0 ms)\n[ RUN      ] StockProfit.Get_transactions_multipul_buy\nStockProfit.tests.cpp:381: Failure\nValue of: stockProfit.getTransactions()\n  Actual: { { 0, 0, 0 }, { 0, 1, 2 }, { 1, 2, 3 } }\nExpected: expectTransactions\nWhich is: { { 0, 0, 0 }, { 0, 1, 2 }, { 1, 0, 2 }, { 1, 2, 3 } }\n[  FAILED  ] StockProfit.Get_transactions_multipul_buy (1 ms)\n[ RUN      ] StockProfit.Get_max_profits_for_two_day_prices\n[       OK ] StockProfit.Get_max_profits_for_two_day_prices (0 ms)\n[ RUN      ] StockProfit.Get_max_profits_after_buy_for_empty_prices\n[       OK ] StockProfit.Get_max_profits_after_buy_for_empty_prices (0 ms)\n[----------] 30 tests from StockProfit (8 ms total)\n\n[----------] Global test environment tear-down\n[==========] 30 tests from 1 test case ran. (11 ms total)\n[  PASSED  ] 29 tests.\n[  FAILED  ] 1 test, listed below:\n[  FAILED  ] StockProfit.Get_transactions_multipul_buy\n\n 1 FAILED TEST\nmake: *** [test.output] Error 1\n","StockProfit.cpp":"#include \"StockProfit.hpp\"\n\nStockProfit::StockProfit(vector<int> prices)\n    : prices_(prices),\n      maxProfitsAfterBuy_(prices.size()),\n      maxProfitsWithStockInHand_(prices.size()),\n      maxProfitsAfterSell_(prices.size()),\n      maxProfits_(prices.size()) {\n    calculateProfits();\n}\n\nvector<int> StockProfit::getMaxProfitsAfterBuy() {\n    return maxProfitsAfterBuy_;\n}\n\nvector<int> StockProfit::getMaxProfitsWithStockInHand() {\n    return maxProfitsWithStockInHand_;\n}\n\nvector<int> StockProfit::getMaxProfitsAfterSell() {\n    return maxProfitsAfterSell_;\n}\n\nvector<int> StockProfit::getMaxProfits() {\n    return maxProfits_;\n}\n\nvoid StockProfit::calculateProfits() {\n    if (prices_.size() == 0) return;\n    maxProfitsAfterBuy_[0] = -prices_[0];\n    maxProfitsWithStockInHand_[0] = maxProfitsAfterBuy_[0];\n    maxProfitsAfterSell_[0] = 0;\n    maxProfits_[0] = 0;\n    for (int i = 1; i < (int)prices_.size(); ++i) {\n        maxProfitsAfterBuy_[i] = (i >= COOLDOWN_DISTANCE ?\n            maxProfits_[i - COOLDOWN_DISTANCE] : 0) - prices_[i];\n        maxProfitsWithStockInHand_[i] = max(\n            maxProfitsWithStockInHand_[i - 1], maxProfitsAfterBuy_[i]);\n        maxProfitsAfterSell_[i] = maxProfitsWithStockInHand_[i - 1]\n            + prices_[i];\n        maxProfits_[i] = max(maxProfits_[i - 1], maxProfitsAfterSell_[i]);\n    }\n}\n\nvoid StockProfit::generateTransactionsByFindBuySellPair(\n    int endOfDay, vector<int>& transaction) {\n    if (endOfDay >= 1) {\n        for (int sell = endOfDay; sell >= 0; --sell) {\n            if (maxProfitsAfterSell_[sell] == maxProfits_[endOfDay]) {\n                if (sell == 0) {\n                    fillPass(transaction, 0, endOfDay);\n                    transactions_.insert(transaction);\n                    break;\n                }\n                transaction[sell] = SELL;\n                if (sell + 1 < (int)prices_.size()) {\n                    transaction[sell + 1] = COOLDOWN;\n                    fillPass(transaction,\n                        sell + COOLDOWN_DISTANCE, endOfDay);\n                }\n                for (int buy = sell - 1; buy >= 0; --buy) {\n                    if (maxProfitsAfterBuy_[buy] + prices_[sell] == \n                        maxProfits_[sell]) {\n                        transaction[buy] = BUY;\n                        fillPass(transaction, buy + 1, sell - 1);\n                        generateTransactionsByFindBuySellPair(\n                            buy - COOLDOWN_DISTANCE, transaction);\n                        break;\n                    }\n                }\n            }\n        }\n    } else {\n        fillPass(transaction, 0, endOfDay);\n        transactions_.insert(transaction);\n    }\n}\n\nvoid StockProfit::fillPass(vector<int>& transaction,\n    int fromDay, int toDay) {\n    for (int i = fromDay; i <= toDay; ++i) {\n        transaction[i] = PASS;\n    }\n}\n\nset<vector<int>> StockProfit::getTransactions() {\n    if (prices_.size() > 0) {\n        vector<int> transaction(prices_.size());\n        generateTransactionsByFindBuySellPair(\n            prices_.size() - 1, transaction);\n    }\n    return transactions_;\n}","StockProfit.hpp":"#ifndef STOCK_PROFIT_INCLUDED\n#define STOCK_PROFIT_INCLUDED\n\n#include <set>\n#include <vector>\n\nusing namespace std;\n\n\nenum Transaction {\n    PASS, BUY, SELL, COOLDOWN\n};\n\n\nclass StockProfit {\n\npublic:\n    StockProfit(vector<int> prices);\n\n    vector<int> getMaxProfitsAfterBuy();\n    vector<int> getMaxProfitsWithStockInHand();\n    vector<int> getMaxProfitsAfterSell();\n    vector<int> getMaxProfits();\n    set<vector<int>> getTransactions();\n\nprivate:\n    void calculateProfits();\n    void generateTransactionsByFindBuySellPair(\n        int endOfDay, vector<int>& transaction);\n    void fillPass(vector<int>& transaction, int fromDay, int toDay);\n\n    vector<int> prices_;\n    vector<int> maxProfitsAfterBuy_;\n    vector<int> maxProfitsWithStockInHand_;\n    vector<int> maxProfitsAfterSell_;\n    vector<int> maxProfits_;\n\n    set<vector<int>> transactions_;\n\n    static const int COOLDOWN_DISTANCE = 2;\n\n};\n\n#endif","StockProfit.tests.cpp":"#include \"StockProfit.hpp\"\n#include <gtest/gtest.h>\n\nusing namespace ::testing;\n\nTEST(StockProfit, Empty_prices) {\n    vector<int> prices;\n    set<vector<int>> expectTransactions;\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectTransactions, stockProfit.getTransactions());\n}\n\nTEST(StockProfit, Get_max_profits_after_buy_for_empty_prices) {\n    vector<int> prices;\n    vector<int> expectMaxProfitsAfterBuy;\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsAfterBuy,\n        stockProfit.getMaxProfitsAfterBuy());\n}\n\nTEST(StockProfit, Get_max_profits_with_stock_in_hand_for_empty_prices) {\n    vector<int> prices;\n    vector<int> expectMaxProfitsWithStockInHand;\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsWithStockInHand,\n        stockProfit.getMaxProfitsWithStockInHand());\n}\n\nTEST(StockProfit, Get_max_profits_after_sell_for_empty_prices) {\n    vector<int> prices;\n    vector<int> expectMaxProfitsAfterSell;\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsAfterSell,\n        stockProfit.getMaxProfitsAfterSell());\n}\n\nTEST(StockProfit, Get_max_profits_for_empty_prices) {\n    vector<int> prices;\n    vector<int> expectMaxProfits;\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfits, stockProfit.getMaxProfits());\n}\n\nTEST(StockProfit, One_day_prices) {\n    int pricesValue[] = {1};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    set<vector<int>> expectTransactions;\n    int transactionValues[] = {PASS};\n    expectTransactions.insert(\n        vector<int>(transactionValues, transactionValues + pricesLength));\n    \n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectTransactions, stockProfit.getTransactions());\n}\n\nTEST(StockProfit, Get_max_profits_after_buy_for_one_day_prices) {\n    int pricesValue[] = {1};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsAfterBuyValues[] = {-1};\n    vector<int> expectMaxProfitsAfterBuy(maxProfitsAfterBuyValues,\n        maxProfitsAfterBuyValues + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsAfterBuy,\n        stockProfit.getMaxProfitsAfterBuy());\n}\n\nTEST(StockProfit, Get_max_profits_with_stock_in_hand_for_one_day_prices) {\n    int pricesValue[] = {1};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsWithStockInHandValues[] = {-1};\n    vector<int> expectMaxProfitsWithStockInHand(\n        maxProfitsWithStockInHandValues,\n        maxProfitsWithStockInHandValues + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsWithStockInHand,\n        stockProfit.getMaxProfitsWithStockInHand());\n}\n\nTEST(StockProfit, Get_max_profits_after_sell_for_one_day_prices) {\n    int pricesValue[] = {1};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsAfterSellValues[] = {0};\n    vector<int> expectMaxProfitsAfterSell(maxProfitsAfterSellValues,\n        maxProfitsAfterSellValues + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsAfterSell,\n        stockProfit.getMaxProfitsAfterSell());\n}\n\nTEST(StockProfit, Get_max_profits_for_one_day_prices) {\n    int pricesValue[] = {1};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsValue[] = {0};\n    vector<int> expectMaxProfits(maxProfitsValue,\n        maxProfitsValue + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfits, stockProfit.getMaxProfits());\n}\n\nTEST(StockProfit, Two_day_prices) {\n    int pricesValue[] = {1, 2};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    set<vector<int>> expectTransactions;\n    int transactionValues[] = {BUY, SELL};\n    expectTransactions.insert(\n        vector<int>(transactionValues, transactionValues + pricesLength));\n    \n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectTransactions, stockProfit.getTransactions());\n}\n\nTEST(StockProfit, Get_max_profits_after_buy_for_two_day_prices) {\n    int pricesValue[] = {1, 2};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsAfterBuyValues[] = {-1, -2};\n    vector<int> expectMaxProfitsAfterBuy(maxProfitsAfterBuyValues,\n        maxProfitsAfterBuyValues + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsAfterBuy,\n        stockProfit.getMaxProfitsAfterBuy());\n}\n\nTEST(StockProfit, Get_max_profits_with_stock_in_hand_for_two_day_prices) {\n    int pricesValue[] = {1, 2};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsWithStockInHandValues[] = {-1, -1};\n    vector<int> expectMaxProfitsWithStockInHand(\n        maxProfitsWithStockInHandValues,\n        maxProfitsWithStockInHandValues + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsWithStockInHand,\n        stockProfit.getMaxProfitsWithStockInHand());\n}\n\nTEST(StockProfit, Get_max_profits_after_sell_for_two_day_prices) {\n    int pricesValue[] = {1, 2};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsAfterSellValues[] = {0, 1};\n    vector<int> expectMaxProfitsAfterSell(maxProfitsAfterSellValues,\n        maxProfitsAfterSellValues + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsAfterSell,\n        stockProfit.getMaxProfitsAfterSell());\n}\n\nTEST(StockProfit, Get_max_profits_for_two_day_prices) {\n    int pricesValue[] = {1, 2};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsValue[] = {0, 1};\n    vector<int> expectMaxProfits(maxProfitsValue,\n        maxProfitsValue + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfits, stockProfit.getMaxProfits());\n}\n\nTEST(StockProfit, Get_max_profits_for_two_day_descending_prices) {\n    int pricesValue[] = {2, 1};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsValue[] = {0, 0};\n    vector<int> expectMaxProfits(maxProfitsValue,\n        maxProfitsValue + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfits, stockProfit.getMaxProfits());\n}\n\nTEST(StockProfit, Three_day_prices) {\n    int pricesValue[] = {1, 2, 3};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    set<vector<int>> expectTransactions;\n    int transactionValues[] = {BUY, PASS, SELL};\n    expectTransactions.insert(\n        vector<int>(transactionValues, transactionValues + pricesLength));\n    \n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectTransactions, stockProfit.getTransactions());\n}\n\nTEST(StockProfit, Get_max_profits_after_buy_for_three_day_prices) {\n    int pricesValue[] = {1, 2, 3};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsAfterBuyValues[] = {-1, -2, -3};\n    vector<int> expectMaxProfitsAfterBuy(maxProfitsAfterBuyValues,\n        maxProfitsAfterBuyValues + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsAfterBuy,\n        stockProfit.getMaxProfitsAfterBuy());\n}\n\nTEST(StockProfit,\n    Get_max_profits_with_stock_in_hand_for_three_day_prices) {\n    int pricesValue[] = {1, 2, 3};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsWithStockInHandValues[] = {-1, -1, -1};\n    vector<int> expectMaxProfitsWithStockInHand(\n        maxProfitsWithStockInHandValues,\n        maxProfitsWithStockInHandValues + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsWithStockInHand,\n        stockProfit.getMaxProfitsWithStockInHand());\n}\n\nTEST(StockProfit, Get_max_profits_after_sell_for_three_day_prices) {\n    int pricesValue[] = {1, 2, 3};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsAfterSellValues[] = {0, 1, 2};\n    vector<int> expectMaxProfitsAfterSell(maxProfitsAfterSellValues,\n        maxProfitsAfterSellValues + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsAfterSell,\n        stockProfit.getMaxProfitsAfterSell());\n}\n\nTEST(StockProfit, Get_max_profits_for_three_day_prices) {\n    int pricesValue[] = {1, 2, 3};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsValue[] = {0, 1, 2};\n    vector<int> expectMaxProfits(maxProfitsValue,\n        maxProfitsValue + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfits, stockProfit.getMaxProfits());\n}\n\nTEST(StockProfit, Get_max_profits_after_buy_for_four_day_prices) {\n    int pricesValue[] = {1, 2, 3, 4};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsAfterBuyValues[] = {-1, -2, -3, -3};\n    vector<int> expectMaxProfitsAfterBuy(maxProfitsAfterBuyValues,\n        maxProfitsAfterBuyValues + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsAfterBuy,\n        stockProfit.getMaxProfitsAfterBuy());\n}\n\nTEST(StockProfit, Get_max_profits_for_four_day_prices) {\n    int pricesValue[] = {1, 2, 3, 4};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsValue[] = {0, 1, 2, 3};\n    vector<int> expectMaxProfits(maxProfitsValue,\n        maxProfitsValue + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfits, stockProfit.getMaxProfits());\n}\n\nTEST(StockProfit, Get_transactions) {\n    int pricesValue[] = {1, 2, 3, 1, 3};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    set<vector<int>> expectTransactions;\n    int transactionValues[] = {BUY, SELL, COOLDOWN, BUY, SELL};\n    expectTransactions.insert(\n        vector<int>(transactionValues, transactionValues + pricesLength));\n    \n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectTransactions, stockProfit.getTransactions());\n}\n\nTEST(StockProfit, Get_max_profits_after_buy) {\n    int pricesValue[] = {1, 2, 3, 1, 3};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsAfterBuyValues[] = {-1, -2, -3, 0, -1};\n    vector<int> expectMaxProfitsAfterBuy(maxProfitsAfterBuyValues,\n        maxProfitsAfterBuyValues + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsAfterBuy,\n        stockProfit.getMaxProfitsAfterBuy());\n}\n\nTEST(StockProfit, Get_max_profits_after_sell) {\n    int pricesValue[] = {1, 2, 3, 1, 3};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsAfterSellValues[] = {0, 1, 2, 0, 3};\n    vector<int> expectMaxProfitsAfterSell(maxProfitsAfterSellValues,\n        maxProfitsAfterSellValues + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfitsAfterSell,\n        stockProfit.getMaxProfitsAfterSell());\n}\n\nTEST(StockProfit, Get_max_profits) {\n    int pricesValue[] = {1, 2, 3, 1, 3};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    int maxProfitsValue[] = {0, 1, 2, 2, 3};\n    vector<int> expectMaxProfits(maxProfitsValue,\n        maxProfitsValue + pricesLength);\n\n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectMaxProfits, stockProfit.getMaxProfits());\n}\n\nTEST(StockProfit, Get_transactions_not_last_sell) {\n    int pricesValue[] = {1, 2, 3, 1};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    set<vector<int>> expectTransactions;\n    int transactionValues[] = {BUY, PASS, SELL, COOLDOWN};\n    expectTransactions.insert(\n        vector<int>(transactionValues, transactionValues + pricesLength));\n    \n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectTransactions, stockProfit.getTransactions());\n}\n\nTEST(StockProfit, Get_transactions_multipul_sell) {\n    int pricesValue[] = {1, 1};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    set<vector<int>> expectTransactions;\n    int transactionValues1[] = {BUY, SELL};\n    expectTransactions.insert(vector<int>(\n        transactionValues1, transactionValues1 + pricesLength));\n    int transactionValues2[] = {PASS, PASS};\n    expectTransactions.insert(vector<int>(\n        transactionValues2, transactionValues2 + pricesLength));\n    \n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectTransactions, stockProfit.getTransactions());\n}\n\nTEST(StockProfit, Get_transactions_multipul_buy) {\n    int pricesValue[] = {1, 1, 1};\n    int pricesLength = sizeof(pricesValue) / sizeof(int);\n    vector<int> prices(pricesValue, pricesValue + pricesLength);\n    set<vector<int>> expectTransactions;\n    int transactionValues1[] = {BUY, SELL, COOLDOWN};\n    expectTransactions.insert(vector<int>(\n        transactionValues1, transactionValues1 + pricesLength));\n    int transactionValues2[] = {BUY, PASS, SELL};\n    expectTransactions.insert(vector<int>(\n        transactionValues2, transactionValues2 + pricesLength));\n    int transactionValues3[] = {PASS, BUY, SELL};\n    expectTransactions.insert(vector<int>(\n        transactionValues3, transactionValues3 + pricesLength));\n    int transactionValues4[] = {PASS, PASS, PASS};\n    expectTransactions.insert(vector<int>(\n        transactionValues4, transactionValues4 + pricesLength));\n    \n    StockProfit stockProfit(prices);\n    ASSERT_EQ(expectTransactions, stockProfit.getTransactions());\n}\n"}